{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading Diabetic Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(r\"C:\\Users\\Madhavi\\Downloads\\diabetes.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(768, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies                 0\n",
       "Glucose                     0\n",
       "BloodPressure               0\n",
       "SkinThickness               0\n",
       "Insulin                     0\n",
       "BMI                         0\n",
       "DiabetesPedigreeFunction    0\n",
       "Age                         0\n",
       "Outcome                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies                   int64\n",
       "Glucose                       int64\n",
       "BloodPressure                 int64\n",
       "SkinThickness                 int64\n",
       "Insulin                       int64\n",
       "BMI                         float64\n",
       "DiabetesPedigreeFunction    float64\n",
       "Age                           int64\n",
       "Outcome                       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      "Pregnancies                 768 non-null int64\n",
      "Glucose                     768 non-null int64\n",
      "BloodPressure               768 non-null int64\n",
      "SkinThickness               768 non-null int64\n",
      "Insulin                     768 non-null int64\n",
      "BMI                         768 non-null float64\n",
      "DiabetesPedigreeFunction    768 non-null float64\n",
      "Age                         768 non-null int64\n",
      "Outcome                     768 non-null int64\n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>127.250000</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
       "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
       "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
       "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
       "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    500\n",
       "1    268\n",
       "Name: Outcome, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d1=df['Outcome'].value_counts()\n",
    "d1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(d1,labels=['Non_diabetic','Diabetic'],autopct=\"%.2f%%\")\n",
    "plt.title(\"Visualization Through pie_Chart\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(768, 8)\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  \n",
       "0                     0.627   50  \n",
       "1                     0.351   31  \n",
       "2                     0.672   32  \n",
       "3                     0.167   21  \n",
       "4                     2.288   33  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=df.iloc[:,0:-1]\n",
    "print(x.shape)\n",
    "print(type(x))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(768,)\n",
      "<class 'pandas.core.series.Series'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    0\n",
       "2    1\n",
       "3    0\n",
       "4    1\n",
       "Name: Outcome, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=df.iloc[:,-1]\n",
    "print(y.shape)\n",
    "print(type(y))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DataSet Splitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(614, 8)\n",
      "(614,)\n",
      "(154, 8)\n",
      "(154,)\n"
     ]
    }
   ],
   "source": [
    "xtr,xte,ytr,yte=train_test_split(x,y,test_size=0.20)\n",
    "print(xtr.shape)\n",
    "print(ytr.shape)\n",
    "print(xte.shape)\n",
    "print(yte.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Template Creation for Model Training & Model Evoluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,classification_report,accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ML_Model(xtr,xte,ytr,yte,model):\n",
    "    model.fit(xtr,ytr)\n",
    "    ypred=model.predict(xte)\n",
    "    print(ypred)\n",
    "    print(\"Training score: \",model.score(xtr,ytr))\n",
    "    print(\"Testing score: \",model.score(xte,yte))\n",
    "    print(\"Accuracy Score: \",accuracy_score(yte,ypred))\n",
    "    cm=confusion_matrix(yte,ypred)\n",
    "    print(cm)\n",
    "    print(classification_report(yte,ypred))\n",
    "    df_cm=pd.DataFrame(cm,columns=np.unique(yte),index=np.unique(yte))\n",
    "    df_cm.index.name='Actual'\n",
    "    df_cm.columns.name='Predicted'\n",
    "    sns.heatmap(df_cm,cmap='Blues',annot=True)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.KNN CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1\n",
      " 1 0 0 0 1 1 0 1 0 1 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0\n",
      " 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\n",
      " 0 0 0 1 1 1]\n",
      "Training score:  0.7882736156351792\n",
      "Testing score:  0.7142857142857143\n",
      "Accuracy Score:  0.7142857142857143\n",
      "[[80 16]\n",
      " [28 30]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.83      0.78        96\n",
      "           1       0.65      0.52      0.58        58\n",
      "\n",
      "   micro avg       0.71      0.71      0.71       154\n",
      "   macro avg       0.70      0.68      0.68       154\n",
      "weighted avg       0.71      0.71      0.71       154\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "m1=KNeighborsClassifier(n_neighbors=13)\n",
    "ML_Model(xtr,xte,ytr,yte,m1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.DECISION TREE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1 0 0 0 1 1 1 1 1\n",
      " 1 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1\n",
      " 0 0 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0\n",
      " 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 1 1 1 0\n",
      " 0 0 0 1 0 1]\n",
      "Training score:  0.9136807817589576\n",
      "Testing score:  0.6558441558441559\n",
      "Accuracy Score:  0.6558441558441559\n",
      "[[65 31]\n",
      " [22 36]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.68      0.71        96\n",
      "           1       0.54      0.62      0.58        58\n",
      "\n",
      "   micro avg       0.66      0.66      0.66       154\n",
      "   macro avg       0.64      0.65      0.64       154\n",
      "weighted avg       0.67      0.66      0.66       154\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "m2=DecisionTreeClassifier(criterion='gini',max_depth=7)\n",
    "ML_Model(xtr,xte,ytr,yte,m2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.RANDOMFOREST_CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0\n",
      " 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0\n",
      " 0 0 0 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0\n",
      " 1 1 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n",
      " 0 0 0 1 0 1]\n",
      "Training score:  0.8859934853420195\n",
      "Testing score:  0.7532467532467533\n",
      "Accuracy Score:  0.7532467532467533\n",
      "[[80 16]\n",
      " [22 36]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.83      0.81        96\n",
      "           1       0.69      0.62      0.65        58\n",
      "\n",
      "   micro avg       0.75      0.75      0.75       154\n",
      "   macro avg       0.74      0.73      0.73       154\n",
      "weighted avg       0.75      0.75      0.75       154\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "m3=RandomForestClassifier(n_estimators=100,criterion='entropy',min_samples_split=15,max_depth=7)\n",
    "ML_Model(xtr,xte,ytr,yte,m3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1\n",
      " 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0\n",
      " 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0\n",
      " 1 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 1]\n",
      "Training score:  0.7817589576547231\n",
      "Testing score:  0.7337662337662337\n",
      "Accuracy Score:  0.7337662337662337\n",
      "[[80 16]\n",
      " [25 33]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.83      0.80        96\n",
      "           1       0.67      0.57      0.62        58\n",
      "\n",
      "   micro avg       0.73      0.73      0.73       154\n",
      "   macro avg       0.72      0.70      0.71       154\n",
      "weighted avg       0.73      0.73      0.73       154\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "m4=SVC(kernel='linear',C=10)\n",
    "ML_Model(xtr,xte,ytr,yte,m4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.LOGISTIC_REGRESSION CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 0 1\n",
      " 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0\n",
      " 0 0 0 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0\n",
      " 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 1]\n",
      "Training score:  0.7768729641693811\n",
      "Testing score:  0.7402597402597403\n",
      "Accuracy Score:  0.7402597402597403\n",
      "[[82 14]\n",
      " [26 32]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.85      0.80        96\n",
      "           1       0.70      0.55      0.62        58\n",
      "\n",
      "   micro avg       0.74      0.74      0.74       154\n",
      "   macro avg       0.73      0.70      0.71       154\n",
      "weighted avg       0.74      0.74      0.73       154\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "m5=LogisticRegression(solver='liblinear')\n",
    "ML_Model(xtr,xte,ytr,yte,m5)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
